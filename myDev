#include "myDev.h"

#include "myAscii.h"

//#include <Servo.h>

//#define inCharConverter (Serial.read() - 32)

#define servoNumber 5

#define total 7

//Servo shouldeServo, elbowServo, wristServo, elbowRoll, handServo;

myDev myDev;

myAscii myAscii2;

struct pwm{
  uint16_t digit[3];
  uint16_t remain;
  uint16_t in; // this value is sum of pwm.digit 1 to 3
};

struct pts{
  uint16_t target;
  uint16_t pt;
  uint8_t dir;
  uint8_t stepCount;
};


struct pwm pwm[total];
struct pts pts[total];

uint16_t minPwm;

uint32_t ptsSum; //429496729

uint8_t fibbo[10] = {1, 2, 3, 5, 8, 13, 21, 34, 56, 89};

int i;

char inChar;

uint8_t inNum;

uint8_t currentPin;

void setup() {
  Serial.begin(115200);
  
  #ifdef myDev_h
    myDev.registerPinEna(8, 9, 10);
    myDev.registerPinDir(11, 12, 13);
    myDev.registerPinStep(14, 15, 16);
    myDev.registerEndSw(22, 23, 24, 25);
    myDev.registerServo(33, 34, 35, 36, 37);
  #endif
/*
  #ifndef Servo_h
    shouldeServo.attach(34);
    elbowServo.attach(35);
    wristServo.attach(36);
    elbowRoll.attach(37);
    handServo.attach(38);
  #endif
  */
}

//234 = end of char
/* 1. setting the curret control pin value
* 2. setting step per movement values(servo restricted 
* 3. setiing direcction. this will set negative or positive position
* 4. if direction is negative then stat.pwmmovement has negative value
* 5. seperate device moving every 0.025seconds
* 6. minimum movement is 800 microseconds
*/
void loop() {
  //myDev.asciiGet(8);
  //myDev.homeAll();
  if (Serial.available()) {
    inChar = Serial.read();
    myAscii2.input(inChar);
    //inNum = inChar;
    //settingProc();
  } else if (!Serial.available()) {
    myAscii2.nosignal();
    delay(1000);
  }
  //delay(1000);
  //Serial.print ("last receive_");
  //Serial.println (inNum);
}

void settingProc() {
  //inChar = inCharConverter;
  //Serial.println (inChar);
  if (inChar >= 97 && inChar <= 125) {
    pwm[currentPin].in = myAscii2.asciiToPwm(inChar, &pwm[currentPin].digit[0], &pwm[currentPin].digit[1], &pwm[currentPin].digit[2]);
    Serial.print("current Pwm_");
    Serial.println(pwm[currentPin].in);  
  } else if (inChar >= 33 && inChar <= 39) { // setting 7 pin setting number
    currentPin = (inChar - 33);
    Serial.print ("set Current Pin_");
    Serial.println (currentPin);
  } else if (inChar >= 40 && inChar <= 41) { // setiing position Values, 0is negative 1 is positive
    pts[currentPin].dir = (inChar - 40);
    if (currentPin == 0) {
      myDev.setDirection(0, pts[currentPin].dir);
    } else if (currentPin == 1) {
      myDev.setDirection(1, pts[currentPin].dir);
    }
  } else if (inChar == 32) {
    //myDev.homeAll(); // not setting this proc yet there is no digital input
  }
}



//this proc must changing stepCount and pt values
uint16_t servoWorker(int i) {
  if (pts[i].target < pts[i].pt) {
    pts[i].pt += pts[i].stepCount;
    return pts[i].pt;
  } else if(pts[i].target > pts[i].pt) {
    pts[i].pt -= pts[i].stepCount;
    return pts[i].pt;
  }
}

uint16_t findMinPwm() {
  minPwm = pwm[0].remain;
  for (i = 1; i < total; i++) {
    minPwm = min(minPwm, pwm[i].remain);
  }
  delayMicroseconds(minPwm);
  for (i = 0; i < total; i++) {
    pwm[i].remain -= minPwm;
    if (pwm[i].remain == 0) {
      pwm[i].remain = pwm[i].in;
      if (i == 0) {
        //stepwork
      } else if (i == 1) {
      } else if (i > 2) {
        myDev.servoMovement(i, servoWorker(i));
      }
    }
  }
  return minPwm; //using for delaymicroseconds
}

uint32_t ptsRemain() {
  ptsSum = 0;
  for (i = 0; i < total; i++) {
    ptsSum += 1;
  }
  return ptsSum;
}

/*
void worker(int i) {
  if (i == 5) {
    myDev.xAxisMovement();
  } else if (i == 6) {
    myDev.rAxisMovement();
  } else if (i == 0) {
    shouldeServo.writeMicroseconds(Stat.pt[0]);
  } else if (i == 1) {
    elbowServo.writeMicroseconds(Stat.pt[1]);
  } else if (i == 2) {
    wristServo.writeMicroseconds(Stat.pt[2]);
  } else if (i == 3) {
    elbowRoll.writeMicroseconds(Stat.pt[3]);
  } else if (i == 4) {
    handServo.writeMicroseconds(Stat.pt[4]);
  }
}
*/
